package behaviormode.observerpattern.demo1;

/**
 * 观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。当主题对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。
 *
 * 优点：
 * 1 松耦合
 * 主题和观察者之间的依赖关系松散，双方只依赖对方的抽象接口，而不依赖具体的实现。这使得系统更容易维护和扩展，因为发布者和订阅者可以独立地变化，而不会相互影响。
 * 比如：在电商系统中，商品库存变化的主题和商家、购物车系统、订单系统等观察者之间没有直具体的实现依赖，它们只通过定义好的接口进行交互。
 *
 * 2 高扩展性/灵活性
 * 可以在运行时根据实际需求动态地添加或删除观察者，而不需要修改主题的代码。
 * 比如：在新闻推送系统中，可以随时让新用户订阅新闻，或者让某些用户取消订阅，而不会影响新闻发布者的代码。
 *
 *
 * 缺点：
 * 1 性能问题
 * 如果主题有很多观察者，并且频繁地发生状态变化，那么通知所有观察者可能会导致性能问题。特别是当观察者的更新操作比较复杂时，可能会影响系统的响应速度。
 * 示例：在一个大型的金融交易系统中，如果有大量的交易员订阅了股票价格变化的通知，而股票价格又频繁波动，那么通知所有交易员可能会消耗大量的系统资源。
 *
 * 2 可能会导致循环依赖
 * 如果观察者在更新自己的状态时又触发了主题的状态变化，那么可能会导致循环依赖，使系统陷入无限循环。
 * 示例：在一个图形界面系统中，如果一个组件的状态变化导致另一个组件更新，而这个组件的更新又反过来影响第一个组件，就可能会出现循环依赖的问题。
 *
 * 使用场景
 * 1 事件驱动系统
 * 如用户界面中的按钮点击、鼠标移动等事件，可以用观察者模式来实现。当事件发生时，通知相应的观察者进行处理。
 * 示例：在图形界面编程中，当用户点击一个按钮时，按钮作为主题会通知注册的观察者（如业务逻辑处理模块）执行相应的操作。
 *
 * 2 消息通知系统
 * 如邮件通知、短信通知等，可以将发送通知的对象作为主题，接收通知的用户作为观察者。当有新消息时，主题通知所有观察者。
 * 示例：在一个企业内部的消息通知系统中，当有新的任务分配或者重要公告时，系统可以通知相关的员工。
 *
 * 3 分布式系统
 * 在分布式系统中，可以用观察者模式来实现节点之间的通信和状态同步。一个节点的状态变化可以通知其他节点进行相应的处理。
 * 示例：在分布式数据库系统中，当一个节点的数据发生变化时，可以通知其他节点进行数据同步。
 *
 *
 * 观察者模式与发布订阅模式的区别
 *
 * 1 概念与结构上的区别
 * 观察者模式：
 * 通常是一个一对多的依赖关系：主题（被观察者）维护一个观察者列表，当主题状态发生变化时，主动通知所有注册的观察者。
 * 结构相对简单：一般只有主题和观察者两个主要角色。主题知道观察者的存在，并直接持有观察者的引用，以便在状态变化时进行通知。
 * 示例：在前面提到的股票交易系统中，股票（主题）直接维护投资者（观察者）的列表，当股票价格变化时，直接通知列表中的投资者。
 *
 * 发布订阅模式：
 * 引入了一个中间的消息代理（事件总线或消息中心）**：发布者将消息发布到消息代理，订阅者向消息代理订阅特定类型的消息。发布者和订阅者之间没有直接的联系，它们通过消息代理进行通信。
 * 结构相对复杂：包含发布者、订阅者和消息代理三个主要角色。发布者和订阅者都只与消息代理交互，不知道对方的存在。
 * 示例：在一个新闻发布系统中，新闻作者（发布者）将新闻发布到新闻平台（消息代理），用户（订阅者）向新闻平台订阅感兴趣的新闻类型。新闻作者和用户之间没有直接的联系，他们通过新闻平台进行通信。
 *
 * 2 解耦程度的区别
 * 观察者模式
 * 虽然实现了一定程度的解耦，但主题和观察者之间仍然存在一定的依赖关系。主题需要知道观察者的接口，以便在状态变化时通知观察者。
 * 示例：在股票交易系统中，如果观察者的接口发生变化，股票（主题）的代码可能需要进行相应的调整。
 *
 * 发布订阅模式
 * 实现了更高程度的解耦。发布者和订阅者完全不知道对方的存在，它们只与消息代理交互。这种解耦使得系统更加灵活和可扩展。
 * 示例：在新闻发布系统中，如果新闻作者的发布方式发生变化，或者用户的订阅方式发生变化，只要消息代理的接口保持稳定，双方都不需要进行调整。
 *
 * 3 功能扩展性的区别
 * 观察者模式
 * 功能相对较为简单，主要用于实现主题状态变化时通知观察者的功能。对于复杂的系统，可能需要结合其他设计模式来实现更多的功能。
 * 示例：在股票交易系统中，如果需要实现更多的功能，如历史价格查询、交易记录保存等，可能需要引入其他的设计模式来协同工作。
 *
 * 发布订阅模式
 * 通常具有更强的功能扩展性**。消息代理可以提供更多的功能，如消息过滤、持久化、事务处理等。发布者和订阅者可以根据需要选择使用这些功能。
 * 示例：在新闻发布系统中，消息代理可以提供新闻分类、推荐算法、用户个性化设置等功能，发布者和订阅者可以根据自己的需求使用这些功能来实现更加丰富的新闻阅读体验。
 *
 * 当前场景：
 * 假设我们有一个社交媒体平台，用户可以在上面发布动态，其他用户可以关注他们感兴趣的人。当一个用户发布新动态时，所有关注他的用户都应该收到通知。
 */
public class SocialNetworkApp {
    public static void main(String[] args) {
        // 创建两个用户实体
        User userA = new User("用户 A");
        User userB = new User("用户 B");

        // 创建两个关注者实体
        Follower followerC = new Follower("粉丝 C");
        Follower followerD = new Follower("粉丝 D");

        // 用户 A 注册关注者
        userA.registerFollower(followerC);
        userA.registerFollower(followerD);

        // 用户 A 发布新动态
        userA.post("今天天气真好！");

        // 用户 B 注册关注者
        userB.registerFollower(followerC);

        // 用户 B 发布新动态
        userB.post("我刚吃了一顿美味的午餐。");
    }
}